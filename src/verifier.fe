use std::buf::{MemoryBuffer, MemoryBufferWriter, MemoryBufferReader}
use std::precompiles
use std::evm

struct G1Point {
    pub x: u256
    pub y: u256
}

struct G2Point {
    pub x: Array<u256, 2>
    pub y: Array<u256, 2>
}

// return the generator of G1
pub fn G1() -> G1Point {
    return G1Point(x: 1, y: 2)
}

//return the generator of G2
pub fn G2() -> G2Point {
    return G2Point(x: [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
                   y: [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930])
}

// negate
pub fn negate(p: G1Point) -> G1Point {
    let mut q: u256 = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    if (p.x == 0){
        if(p.y == 0) {
            return G1Point(x: 0, y: 0)
        }
    }
    return G1Point(x: p.x, y: q - (p.y % q))
}

pub fn add(p: G1Point, q: G1Point) -> G1Point {
    let res: (u256, u256) = precompiles::ec_add(x1: p.x, y1: p.y, x2: q.x, y2: q.y)
    return G1Point(x: res.item0, y: res.item1)
}

pub fn scalar_mul(p: G1Point, r: u256) -> G1Point {
    let res: (u256, u256) = precompiles::ec_mul(x: p.x, y: p.y, s: r)
    return G1Point(x: res.item0, y: res.item1)
}

struct VerifyingKey {
    pub alfa1: G1Point
    pub beta2: G2Point
    pub gamma2: G2Point
    pub delta2: G2Point
    // IC'yi bu şekilde dinamik alacağız, ve JS ile dolduracağız?
    pub IC: Array<G1Point, 2>
}

struct Proof {
    pub A: G1Point
    pub B: G2Point
    pub C: G1Point
}

fn verifyingKey() -> VerifyingKey {
    let alfa1: G1Point = G1Point(
            x: 18986994054831033570197018374507745079604334824038474376810821382341658341358,
            y: 9857034825708937828129722307559364555144967863984840417006236609097843967147
        )
    
    let beta2: G2Point = G2Point(
            x: [9138224228407402916103338031673805059436445969293455575712717090470338056266,
             18390029660978007887012397144274200115548124992262045309168725395291020532646],
            y: [13521623794085633987820957758529862860973247929283590310564032250223240671848,
             3861004002262797311682051645188776069221901493726904234127961112799581415639]
        )

    let gamma2: G2Point = G2Point(
            x: [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            y: [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        )

    let delta2: G2Point = G2Point(
            x: [3810475614507152687978045945018363916901751186873297176897861851851025646174,
             11517822973057293310299905404808144348048624735019551898183051528663733638390],
            y: [7205787144229011189765531580637096098035200993493430523391610777645930427053,
             18901678484212115678597129685298885730350402277813795965474832351751410499421]
        )

    let IC: Array<G1Point, 2> = [
    
        G1Point( 
            x: 67521893739652156791009141370073344821154292280368295170345470354897934196,
            y: 17040597570089860980787757123222393819903832599488360597826421841263128988811
        ),                                   
        
    
        G1Point( 
            x: 6621938124027639260974226744038109301855429178070752528844179929793898435285,
            y: 2291636765942087387769041560925446553420342985960064087254817725377189124295
        )
    ]

    return VerifyingKey(
        alfa1: alfa1,
        beta2: beta2,
        gamma2: gamma2,
        delta2: delta2,
        IC: IC
    )
}

pub fn pairing(a1: G1Point, a2: G2Point,
               b1: G1Point, b2: G2Point,
               c1: G1Point, c2: G2Point,
               d1: G1Point, d2: G2Point) -> bool {

    let input_len: u256 = 32 * 24 // all writers work now
    let mut buf: MemoryBuffer = MemoryBuffer::new(len: input_len) 
    let mut writer: MemoryBufferWriter = buf.writer()

    writer.write(value: a1.x)
    writer.write(value: a1.y)
    writer.write(value: a2.x[0])
    writer.write(value: a2.x[1])
    writer.write(value: a2.y[0])
    writer.write(value: a2.y[1])
    writer.write(value: b1.x)
    writer.write(value: b1.y)
    writer.write(value: b2.x[0])
    writer.write(value: b2.x[1])
    writer.write(value: b2.y[0])
    writer.write(value: b2.y[1])
    writer.write(value: c1.x)
    writer.write(value: c1.y)
    writer.write(value: c2.x[0])
    writer.write(value: c2.x[1])
    writer.write(value: c2.y[0])
    writer.write(value: c2.y[1])
    writer.write(value: d1.x)
    writer.write(value: d1.y)
    writer.write(value: d2.x[0])
    writer.write(value: d2.x[1])
    writer.write(value: d2.y[0])
    writer.write(value: d2.y[1])
        
    let res: bool = precompiles::ec_pairing(buf: buf)

    return res
}

pub fn verifyProof(a: Array<u256, 2>,
                   b: Array<Array<u256, 2>, 2>,
                   c: Array<u256, 2>,
                   input: Array<u256, 1>) -> bool {
    
    let proof: Proof = Proof(
        A: G1Point(x: a[0], y: a[1]),
        B: G2Point(x: [b[0][0], b[0][1]], y: [b[1][0], b[1][1]]),
        C: G1Point(x: c[0], y: c[1]))
       
    let vk: VerifyingKey = verifyingKey()

    let snark_scalar_field: u256 = 21888242871839275222246405745257275088548364400416034343698204186575808495617
    
    let mut vk_x: G1Point = G1Point(x: 0, y: 0)
    vk_x = add(p: vk_x, q: vk.IC[0])

    let mut i: u256 = 0

    while i < 1 {
        assert input[i] < snark_scalar_field
        let mul_temp: G1Point = scalar_mul(p: vk.IC[i+1], r: input[i])
        vk_x = add(p: vk_x, q: mul_temp)
        i += 1
    }

    let neg_proofA: G1Point = negate(p: proof.A)

    let res: bool = pairing(
        a1: neg_proofA,
        a2: proof.B,
        b1: vk.alfa1,
        b2: vk.beta2,
        c1: vk_x,
        c2: vk.gamma2,
        d1: proof.C,
        d2: vk.delta2
    )   
    
    return res
}

#test
fn test_verify_proof() {
    let verification: bool = verifyProof(
        a: [0x28930e0aeb50e7e3b5f9a54a6abdce99978e00701914dfd4d87f8dc5ea9e1d02, 0x02c1e99774e679c144aceac4e9fdbc67dc858533d9f49c5933939c89010131b7],
        b: [[0x0684d8357689fb95e886a8251db0e142ffdda8032e314750455b9f5ff13159ca, 0x26189ebc171412019704e808c432062721db66c4a22635f20ed422a2147ad5bf], [0x005d309291fd34bef6248c17779114907b6d912a5a02ddae46d902dbd05e2e1c, 0x01673b4a2e94569e28e23a9ae808b9f92b4d21beca07522f79d16ec419a6e85c]],
        c: [0x25170145c09315e2df3c93d155b39df35434469607b0121a16125224190a596a, 0x05467081343913d54408694735a8d149578e7cbb3168f2b4283a7fe2861a7a42],
        input: [0x0000000000000000000000000000000000000000000000000000000000000021]
    )

    assert verification == true
}