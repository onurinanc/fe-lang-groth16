use std::precompiles

struct G1Point {
    pub x: u256
    pub y: u256
}

struct G2Point {
    pub x: Array<u256, 2>
    pub y: Array<u256, 2>
}

// return the generator of G1
pub fn G1() -> G1Point {
    return G1Point(x: 1, y: 2)
}

//return the generator of G2
pub fn G2() -> G2Point {
    return G2Point(x: [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
                   y: [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930])
}

// negate
pub fn negate(p: G1Point) -> G1Point {
    let mut q: u256 = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    if (p.x == 0){
        if(p.y == 0) {
            return G1Point(x: 0, y: 0)
        }
    }
    return G1Point(x: p.x, y: q - (p.y % q))
}

pub fn add(p: G1Point, q: G1Point) -> G1Point {
    let res: (u256, u256) = precompiles::ec_add(x1: p.x, y1: p.y, x2: q.x, y2: q.y)
    return G1Point(x: res.item0, y: res.item1)
}

pub fn scalar_mul(p: G1Point, r: u256) -> G1Point {
    let res: (u256, u256) = precompiles::ec_mul(x: p.x, y: p.y, s: r)
    return G1Point(x: res.item0, y: res.item1)
}

// Add pairing function inside.
// Biz sadece bunu 1 pairing ile yapacağız, çünkü fixed size olması gerekiyor.
// pairing
// pairingProd1
// pairingProd2
// pairingProd3
// pairingProd4

pub fn pairing(p: G1Point, q: G2Point) -> bool {
    return true
}

struct VerifyingKey {
    pub alfa1: G1Point
    pub beta2: G2Point
    pub gamma2: G2Point
    pub delta2: G2Point
    // IC'yi bu şekilde dinamik alacağız, ve JS ile dolduracağız?
    pub IC: Array<G1Point, <%=IC.length%>>
}

struct Proof {
    pub A: G1Point
    pub B: G2Point
    pub C: G1Point
}

fn verifyingKey() -> VerifyingKey {
    let alfa1: G1Point = G1Point(
            x: <%=vk_alpha_1[0]%>,
            y: <%=vk_alpha_1[1]%>
        )
    
    let beta2: G2Point = G2Point(
            x: [<%=vk_beta_2[0][1]%>,
             <%=vk_beta_2[0][0]%>],
            y: [<%=vk_beta_2[1][1]%>,
             <%=vk_beta_2[1][0]%>]
        )

    let gamma2: G2Point = G2Point(
            x: [<%=vk_gamma_2[0][1]%>,
             <%=vk_gamma_2[0][0]%>],
            y: [<%=vk_gamma_2[1][1]%>,
             <%=vk_gamma_2[1][0]%>]
        )

    let delta2: G2Point = G2Point(
            x: [<%=vk_delta_2[0][1]%>,
             <%=vk_delta_2[0][0]%>],
            y: [<%=vk_delta_2[1][1]%>,
             <%=vk_delta_2[1][0]%>]
        )

    let IC: Array<G1Point, <%=IC.length%>> =
    [
    <% for (let i=0; i<IC.length - 1; i++) { %>
        G1Point( 
            x: <%=IC[i][0]%>,
            y: <%=IC[i][1]%>
        ),                                   
        <% } %>

        G1Point( 
            x: <%=IC[IC.length - 1][0]%>,
            y: <%=IC[IC.length - 1][1]%>
        )
    ]
}

// input -> dinamik bir şekilde verilecek?
// input'u dinamik bir şekilde nasıl alacağız?
// input: Array<u256, INPUT_LENGTH>
// Yukarıdaki statement input lengthine göre değişeceği için
// input length'ini nasıl belirleyeceğiz?
// ?????????????? input: ?????????????
// input lengthi IC.length-1 olacak?? O zaman sorun olmaz.

function verify(input: Array<u256, <%=IC.length-1%>>, proof: Proof) -> uint256 {
    uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617
    let vk: VerifyingKey = verifyingKey()
    let vk_x: G1Point = G1Point(x: 0, y: 0)
    // Burada kaldık.
    // for i in values {
    //        sum = sum + i
    //    }
    // values: array olacak, see: https://fe-lang.org/docs/spec/statements/for.html
}

#test
fn test_struct() {
    let mut p_g1: G1Point = G1Point(x: 10, y:20)
    let p_x_plus_y: u256 = p_g1.x + p_g1.y
    assert p_x_plus_y == 30
}

#test
fn test_G1_return() {
    let mut res_g1_gen: G1Point = G1()
    assert res_g1_gen.x == 1
    assert res_g1_gen.y == 2
}

#test
fn test_G2_return() {
    let mut res_g2_gen: G2Point = G2()
    assert res_g2_gen.x[0] == 11559732032986387107991004021392285783925812861821192530917403151452391805634
    assert res_g2_gen.y[1] == 8495653923123431417604973247489272438418190587263600148770280649306958101930
}

#test
fn test_negate() {
    let g1: G1Point = G1()
    let g1_neg: G1Point = negate(p: g1)    
    let sum: (u256, u256) = precompiles::ec_add(x1: g1.x, y1: g1.y, x2: g1_neg.x, y2: g1_neg.y)
    assert sum.item0 == 0
    assert sum.item1 == 0
}

#test
fn test_ec_add() {
    let p: G1Point = G1()
    let q: G1Point = G1()
    let addition: G1Point = add(p: p, q: q)
    let p_double: (u256, u256) = precompiles::ec_mul(x: p.x, y: p.y, s:2)
    assert addition.x == p_double.item0
    assert addition.y == p_double.item1
}